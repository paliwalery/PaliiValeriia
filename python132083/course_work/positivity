from psychopy import sound, gui, visual, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, FINISHED)
from numpy.random import random
import os  # handy system and path functions
from psychopy.hardware import keyboard

# Ensure that relative paths start from the same directory as this script
thisDir = os.path.dirname(os.path.abspath(__file__))
os.chdir(thisDir)

# Store info about the experiment session
expName = 'positivity'  
expInfo = {'participant': ''}
dlg = gui.DlgFromDict(dictionary=expInfo, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])
# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName,
    extraInfo=expInfo, 
    saveWideText=True,
    dataFileName=filename)

endExpNow = False  # flag for 'escape' or other condition => quit the exp
frameTolerance = 0.001  # how close to onset before 'same' frame
# Setup the Window
win = visual.Window(
    size=[1600, 900], 
    color=[0,0,0], colorSpace='rgb',
    units='norm')

# create a default keyboard (e.g. to check for escape)
defaultKeyboard = keyboard.Keyboard()
trialClock = core.Clock()
# Initialize components for Routine "trial"
instr = visual.TextStim(win=win, name='instr',
    text='Спасибо за участие в эксперименте!\nПросим Вас оценить слова по шкале от 1 до 5,\nгде 1 - максимально негативное, 5 - максимально позитивное.\nОсновывайтесь на ваших ощущениях.',
    font='Garamond',
    pos=(0, 0.4), height=0.055, wrapWidth=1.2, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR', #left-to-right
    depth=0.0);
text = visual.TextStim(win=win, name='text',
    text='default text',
    font='Garamond',
    pos=(0, 0.15), height=0.1, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR', depth=-1.0);
slider = visual.Slider(win=win, name='slider',
    size=(1, 0.05), pos=(0, -0.1),
    labels=["1\nНегативное", "2\nСкорее негативное", "3\nНейтральное", "4\nСкорее позитивное", "5\nПозитивное"], ticks=(1, 2, 3, 4, 5),
    granularity=1, style=['rating', 'triangleMarker'], labelHeight = .05,
    color='white', font='Garamond', depth=-2)
slider.marker.size=(0.15, 0.075)
slider.marker.color="blue"

# set up handler to look after randomisation of conditions etc
trials = data.TrialHandler(nReps=1, method='random', 
    trialList=data.importConditions('posit.xlsx'))
thisExp.addLoop(trials)  # add the loop to the experiment
thisTrial = trials.trialList[0]  # so we can initialise stimuli with some values

for thisTrial in trials:
    currentLoop = trials
    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)
    if thisTrial != None:
        for paramName in thisTrial:
            exec('{} = thisTrial[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "trial"-------
    continueRoutine = True
    # update component parameters for each repeat
    text.setText(word)
    slider.reset()
    # keep track of which components have finished
    trialComponents = [instr, text, slider]
    for thisComponent in trialComponents:
        thisComponent.tStart = None
        thisComponent.tStartRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    trialClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
    frameN = -1
    
    # -------Run Routine "trial"-------
    while continueRoutine:
        # get current time
        t = trialClock.getTime()
        tThisFlip = win.getFutureFlipTime(clock=trialClock)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *instr* updates
        if instr.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            instr.frameNStart = frameN  # exact frame index
            instr.tStart = t  # local t and not account for scr refresh
            win.timeOnFlip(instr, 'tStartRefresh')  # time at next scr refresh
            instr.setAutoDraw(True)
        
        # *text* updates
        if text.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text.frameNStart = frameN  # exact frame index
            text.tStart = t  # local t and not account for scr refresh
            win.timeOnFlip(text, 'tStartRefresh')  # time at next scr refresh
            text.setAutoDraw(True)
        
        # *slider* updates
        if slider.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            slider.frameNStart = frameN  # exact frame index
            slider.tStart = t  # local t and not account for scr refresh
            win.timeOnFlip(slider, 'tStartRefresh')  # time at next scr refresh
            slider.setAutoDraw(True)
        
        # Check slider for response to end routine
        if slider.getRating() is not None and slider.status == STARTED:
            continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trialComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "trial"-------
    for thisComponent in trialComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    trials.addData('slider.response', slider.getRating())
    # the Routine "trial" was not non-slip safe, so reset the non-slip timer
    thisExp.nextEntry()
    
# completed 1 repeat of 'trials'
# Flip one final time so any remaining win.callOnFlip() 
# and win.timeOnFlip() tasks get executed before quitting
win.flip()  #This replaces the update() method, better reflecting what is happening underneath

# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv', delim='auto')

# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()
